class Solution {
    public int uniquePaths(int m, int n) {
   
        int [][]dir={{0,1},{1,0}};
				int [][]memo=new int [m][n];
				return path(0,0,m-1,n-1,dir,memo);
			}
			public int path(int sr,int sc,int dr,int dc,int [][]dir,int [][]memo)
			{
			if(sr == dr && sc == dc){
				   memo[sr][sc]=1;
					return 1;
				}
				if(memo[sr][sc]!=0)
				{
					return memo[sr][sc];
				}
				int count=0;
				for(int d=0;d<dir.length;d++)
				{
					int r=sr+dir[d][0];
					int c=sc+dir[d][1];

					if(inRange(r,c,dr+1,dc+1))
					{
						count+=path(r,c,dr,dc,dir,memo);
					}
				}
				memo[sr][sc]=count;
				return count;
			}
			public boolean inRange(int r,int c,int n,int m)
			{
				if(r<0 || r>=n || c<0 || c>=m)
				{
					return false;
				}
				return true;
			}
		}
